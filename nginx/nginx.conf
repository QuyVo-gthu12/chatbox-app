# ======================
# Nginx Gateway Config
# ======================

worker_processes auto;
events {
    worker_connections 1024;
}

http {
    # --- Format log ---
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # --- Upstream / Load Balancing ---
    upstream user_service {
        server user-service:3001;
    }

    upstream chat_service {
        server chat-service:3000;
    }

    upstream media_service {
        server media-service:3002;
    }

    server {
        listen 80;

        # === USER API ===
        location /api/users/ {
            rewrite ^/api/users/(.*)$ /$1 break;   # Xóa /api/users prefix
            proxy_pass http://user_service/;      # Forward đúng path
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # === CHAT API (WebSocket) ===
        location /api/chat/ {
            rewrite ^/api/chat/(.*)$ /$1 break;   # Xóa /api/chat prefix
            proxy_pass http://chat_service/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # === MEDIA API ===
        location /api/media/ {
            rewrite ^/api/media/(.*)$ /$1 break;   # Xóa /api/media prefix
            proxy_pass http://media_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # === Default / Health check ===
        location / {
            return 200 'API Gateway is running!\n';
            add_header Content-Type text/plain;
        }
    }
}
